// scripts/migrate.js
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
require('dotenv').config();
const { Pool } = require('pg');

// Configura√ß√£o do banco de dados
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
  ssl: { rejectUnauthorized: false }
});

class MigrationManager {
  constructor() {
    this.migrationsPath = path.join(__dirname, '..', 'migrations');
  }

  // Inicializar tabela de controle de migra√ß√µes
  async initializeMigrationTable() {
    try {
      const schemaVersionPath = path.join(this.migrationsPath, 'schema_version.sql');
      const sql = fs.readFileSync(schemaVersionPath, 'utf8');
      await pool.query(sql);
      console.log('‚úÖ Tabela de migra√ß√µes inicializada');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar tabela de migra√ß√µes:', error);
      throw error;
    }
  }

  // Obter migra√ß√µes j√° executadas
  async getExecutedMigrations() {
    try {
      const result = await pool.query('SELECT version FROM schema_migrations ORDER BY version');
      return result.rows.map(row => row.version);
    } catch (error) {
      console.error('‚ùå Erro ao obter migra√ß√µes executadas:', error);
      return [];
    }
  }

  // Obter arquivos de migra√ß√£o dispon√≠veis
  getMigrationFiles() {
    try {
      const files = fs.readdirSync(this.migrationsPath)
        .filter(file => file.endsWith('.sql') && file !== 'schema_version.sql')
        .sort();
      
      return files.map(file => ({
        version: path.basename(file, '.sql'),
        filename: file,
        path: path.join(this.migrationsPath, file)
      }));
    } catch (error) {
      console.error('‚ùå Erro ao ler arquivos de migra√ß√£o:', error);
      return [];
    }
  }

  // Calcular checksum do arquivo
  calculateChecksum(content) {
    return crypto.createHash('md5').update(content).digest('hex');
  }

  // Executar migra√ß√£o espec√≠fica
  async executeMigration(migration) {
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      // Ler conte√∫do da migra√ß√£o
      const content = fs.readFileSync(migration.path, 'utf8');
      const checksum = this.calculateChecksum(content);
      
      // Extrair descri√ß√£o do coment√°rio
      const lines = content.split('\n');
      const descriptionLine = lines.find(line => line.trim().startsWith('--') && !line.includes('migrations/'));
      const description = descriptionLine ? descriptionLine.replace(/^--\s*/, '').trim() : '';
      
      console.log(`üîÑ Executando migra√ß√£o: ${migration.version}`);
      console.log(`üìù Descri√ß√£o: ${description}`);
      
      // Executar SQL da migra√ß√£o
      await client.query(content);
      
      // Registrar migra√ß√£o como executada
      await client.query(
        'INSERT INTO schema_migrations (version, description, checksum) VALUES ($1, $2, $3)',
        [migration.version, description, checksum]
      );
      
      await client.query('COMMIT');
      console.log(`‚úÖ Migra√ß√£o ${migration.version} executada com sucesso`);
      
    } catch (error) {
      await client.query('ROLLBACK');
      console.error(`‚ùå Erro ao executar migra√ß√£o ${migration.version}:`, error);
      throw error;
    } finally {
      client.release();
    }
  }

  // Executar todas as migra√ß√µes pendentes
  async runMigrations() {
    try {
      console.log('üöÄ Iniciando processo de migra√ß√£o...\n');
      
      // Inicializar tabela de controle
      await this.initializeMigrationTable();
      
      // Obter migra√ß√µes executadas e dispon√≠veis
      const executedMigrations = await this.getExecutedMigrations();
      const availableMigrations = this.getMigrationFiles();
      
      // Filtrar migra√ß√µes pendentes
      const pendingMigrations = availableMigrations.filter(
        migration => !executedMigrations.includes(migration.version)
      );
      
      if (pendingMigrations.length === 0) {
        console.log('‚ÑπÔ∏è  Todas as migra√ß√µes j√° foram executadas');
        return;
      }
      
      console.log(`üìã ${pendingMigrations.length} migra√ß√£o(√µes) pendente(s):`);
      pendingMigrations.forEach(migration => {
        console.log(`   - ${migration.version}`);
      });
      console.log('');
      
      // Executar migra√ß√µes pendentes
      for (const migration of pendingMigrations) {
        await this.executeMigration(migration);
      }
      
      console.log('\nüéâ Todas as migra√ß√µes foram executadas com sucesso!');
      
    } catch (error) {
      console.error('\nüí• Erro durante o processo de migra√ß√£o:', error);
      process.exit(1);
    }
  }

  // Mostrar status das migra√ß√µes
  async showStatus() {
    try {
      await this.initializeMigrationTable();
      
      const executedMigrations = await this.getExecutedMigrations();
      const availableMigrations = this.getMigrationFiles();
      
      console.log('\nüìä STATUS DAS MIGRA√á√ïES');
      console.log('========================\n');
      
      if (availableMigrations.length === 0) {
        console.log('‚ÑπÔ∏è  Nenhuma migra√ß√£o encontrada');
        return;
      }
      
      availableMigrations.forEach(migration => {
        const isExecuted = executedMigrations.includes(migration.version);
        const status = isExecuted ? '‚úÖ EXECUTADA' : '‚è≥ PENDENTE';
        console.log(`${status} - ${migration.version}`);
      });
      
      const pendingCount = availableMigrations.length - executedMigrations.length;
      console.log(`\nüìà Total: ${availableMigrations.length} migra√ß√µes`);
      console.log(`‚úÖ Executadas: ${executedMigrations.length}`);
      console.log(`‚è≥ Pendentes: ${pendingCount}`);
      
    } catch (error) {
      console.error('‚ùå Erro ao verificar status:', error);
    }
  }
}

// Fun√ß√£o principal
async function main() {
  const args = process.argv.slice(2);
  const command = args[0] || 'run';
  
  const migrationManager = new MigrationManager();
  
  try {
    switch (command) {
      case 'run':
        await migrationManager.runMigrations();
        break;
      case 'status':
        await migrationManager.showStatus();
        break;
      default:
        console.log('Comandos dispon√≠veis:');
        console.log('  node scripts/migrate.js run    - Executar migra√ß√µes pendentes');
        console.log('  node scripts/migrate.js status - Mostrar status das migra√ß√µes');
    }
  } finally {
    await pool.end();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = MigrationManager;